//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input System/MarioActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MarioActions : IInputActionCollection2, IDisposable
{
  public InputActionAsset asset { get; }
  public @MarioActions()
  {
    asset = InputActionAsset.FromJson(@"{
    ""name"": ""MarioActions"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""745f4a3e-012d-45cc-90ac-e20df6156c38"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Button"",
                    ""id"": ""ae238189-0455-48e8-aa24-ce6b683c11e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""7aea4e23-94cc-41a9-9de1-84a04e5c235b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jumphold"",
                    ""type"": ""Button"",
                    ""id"": ""d49997dc-fa97-4630-8d80-e63dd40f6c7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7f573c62-7657-4c63-b825-3b1d23bd438d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""34597d2d-800b-42d1-b666-424a14255186"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""44bd0613-5a67-4635-a286-90c31b40036b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis alt"",
                    ""id"": ""a1f92309-bfdc-45ca-83ed-57fb624f9168"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b88ecb88-ba11-4453-adf7-0f2aad5912c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""475aaeba-afe1-4b9c-b118-bc627889e950"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""16bb7526-de14-4ccd-b3de-2398a8ffef33"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ae1aab4-39a7-47f3-ba54-965aa27a5ad3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""jumphold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
    // gameplay
    m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
    m_gameplay_move = m_gameplay.FindAction("move", throwIfNotFound: true);
    m_gameplay_jump = m_gameplay.FindAction("jump", throwIfNotFound: true);
    m_gameplay_jumphold = m_gameplay.FindAction("jumphold", throwIfNotFound: true);
  }

  public void Dispose()
  {
    UnityEngine.Object.Destroy(asset);
  }

  public InputBinding? bindingMask
  {
    get => asset.bindingMask;
    set => asset.bindingMask = value;
  }

  public ReadOnlyArray<InputDevice>? devices
  {
    get => asset.devices;
    set => asset.devices = value;
  }

  public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

  public bool Contains(InputAction action)
  {
    return asset.Contains(action);
  }

  public IEnumerator<InputAction> GetEnumerator()
  {
    return asset.GetEnumerator();
  }

  IEnumerator IEnumerable.GetEnumerator()
  {
    return GetEnumerator();
  }

  public void Enable()
  {
    asset.Enable();
  }

  public void Disable()
  {
    asset.Disable();
  }

  public IEnumerable<InputBinding> bindings => asset.bindings;

  public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
  {
    return asset.FindAction(actionNameOrId, throwIfNotFound);
  }

  public int FindBinding(InputBinding bindingMask, out InputAction action)
  {
    return asset.FindBinding(bindingMask, out action);
  }

  // gameplay
  private readonly InputActionMap m_gameplay;
  private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
  private readonly InputAction m_gameplay_move;
  private readonly InputAction m_gameplay_jump;
  private readonly InputAction m_gameplay_jumphold;
  public struct GameplayActions
  {
    private @MarioActions m_Wrapper;
    public GameplayActions(@MarioActions wrapper) { m_Wrapper = wrapper; }
    public InputAction @move => m_Wrapper.m_gameplay_move;
    public InputAction @jump => m_Wrapper.m_gameplay_jump;
    public InputAction @jumphold => m_Wrapper.m_gameplay_jumphold;
    public InputActionMap Get() { return m_Wrapper.m_gameplay; }
    public void Enable() { Get().Enable(); }
    public void Disable() { Get().Disable(); }
    public bool enabled => Get().enabled;
    public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
    public void AddCallbacks(IGameplayActions instance)
    {
      if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
      m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
      @move.started += instance.OnMove;
      @move.performed += instance.OnMove;
      @move.canceled += instance.OnMove;
      @jump.started += instance.OnJump;
      @jump.performed += instance.OnJump;
      @jump.canceled += instance.OnJump;
      @jumphold.started += instance.OnJumphold;
      @jumphold.performed += instance.OnJumphold;
      @jumphold.canceled += instance.OnJumphold;
    }

    private void UnregisterCallbacks(IGameplayActions instance)
    {
      @move.started -= instance.OnMove;
      @move.performed -= instance.OnMove;
      @move.canceled -= instance.OnMove;
      @jump.started -= instance.OnJump;
      @jump.performed -= instance.OnJump;
      @jump.canceled -= instance.OnJump;
      @jumphold.started -= instance.OnJumphold;
      @jumphold.performed -= instance.OnJumphold;
      @jumphold.canceled -= instance.OnJumphold;
    }

    public void RemoveCallbacks(IGameplayActions instance)
    {
      if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
        UnregisterCallbacks(instance);
    }

    public void SetCallbacks(IGameplayActions instance)
    {
      foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
        UnregisterCallbacks(item);
      m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
      AddCallbacks(instance);
    }
  }
  public GameplayActions @gameplay => new GameplayActions(this);
  private int m_KeyboardSchemeIndex = -1;
  public InputControlScheme KeyboardScheme
  {
    get
    {
      if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
      return asset.controlSchemes[m_KeyboardSchemeIndex];
    }
  }
  public interface IGameplayActions
  {
    void OnMove(InputAction.CallbackContext context);
    void OnJump(InputAction.CallbackContext context);
    void OnJumphold(InputAction.CallbackContext context);
  }

}
